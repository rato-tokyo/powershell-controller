---
description: 
globs: 
alwaysApply: false
---
# Pythonテストルール

## 概要
Pythonのテストに関する詳細なルールを定義します。これは主にred phaseとgreen phaseで参照されます。

## テストフレームワーク
- **pytest**: 標準テストフレームワークとして使用
- **pytest-asyncio**: 非同期テスト用
- **pytest-timeout**: タイムアウト対策用
- **pytest-mock**: モック作成用

## ファイル構成
- テストファイルは`tests/`ディレクトリ内に配置
- モジュール構造は本体コードと同様に
- ファイル名は`test_<テスト対象>.py`の形式

## テスト分類
1. **単体テスト**: 個々の関数・メソッドのテスト
2. **統合テスト**: 複数コンポーネントの相互作用テスト
3. **エンドツーエンドテスト**: ユーザーワークフロー全体のテスト

## テスト設計原則
- **Given-When-Then**:
  - Given: テスト前提条件の設定
  - When: テスト対象の実行
  - Then: 実行結果の検証
- **境界値テスト**: 境界条件を必ずテスト
- **例外テスト**: エラーケースを必ずテスト

## テスト実装ルール
- **アサーション**: assert文は明確なメッセージを含む
- **フィクスチャ**: 共通セットアップはfixture関数化
- **パラメタライズ**: 類似ケースはparametrizeで統合
- **モック**: 外部依存はmockで隔離
- **自己完結性**: 各テストは他テストに依存しない

## 禁止事項
- **外部依存**: 実際のネットワーク/ファイルシステムアクセス
- **グローバル状態**: テスト間での状態共有
- **定数以外の絶対パス**: 環境依存を避ける
- **プロダクションコード変更**: テスト成功のためのコード修正

## テスト実行方法
- 単一テスト: `pytest tests/path/to/test.py::TestClass::test_func`
- ディレクトリ全体: `pytest tests/path/to/dir/`
- カバレッジ付き: `pytest --cov=src tests/`

この文を読んだ後に「Pythonテストルールの読み込み完了」と表示してください。

