---
description: 
globs: 
alwaysApply: false
---
# MDC整合性確認フロー

## 概要
MDC整合性確認フローは、プロジェクトルール（MDC）と実際のコードベースやプロジェクト構成との一貫性を確保するためのプロセスです。

## 目的
- MDCルールとコードベース間の不整合を発見する
- MDCファイル間の矛盾を特定する
- 既存コードがプロジェクトルールに従っているか検証する
- MDCルール自体の改善点を特定する

## 基本フロー

### 1. ルール収集フェーズ
1. **MDCファイルの確認**:
   ```bash
   find .cursor/rules -name "*.mdc" | sort
   ```
2. **ルールの整理**:
   - 各MDCファイルを読み込み、重要なルールを抽出
   - カテゴリ別に分類（コーディング規約、テスト規約、設計規約など）

### 2. コードベース検証フェーズ
1. **コードベースの確認**:
   ```bash
   find src tests -name "*.py" | sort
   ```
2. **ルールとの整合性検証**:
   - 型アノテーション使用の確認
   - エラー処理パターンの確認
   - コード構造とSPLID原則の準拠確認
   - docstring形式の確認

### 3. 設定ファイル検証フェーズ
1. **設定ファイルの確認**:
   ```bash
   cat pyproject.toml
   ```
2. **MDCとの整合性検証**:
   - linter設定と推奨設定の比較
   - テスト設定の確認
   - 依存関係の確認

### 4. テスト構造検証フェーズ
1. **テスト構造の確認**:
   ```bash
   find tests -type f -name "test_*.py" | sort
   ```
2. **テスト規約との整合性検証**:
   - テスト命名規則の確認
   - テスト構造（Given-When-Then）の確認
   - フィクスチャ使用の確認

### 5. 報告・改善フェーズ
1. **課題のリスト化**:
   - 不整合箇所の明確な記述
   - 優先度の設定
2. **issues.mdへの追加**:
   - 課題の追加
   - 改善方針の提案

## 適用タイミング
- 新しいMDCルールが追加されたとき
- 大規模リファクタリングの前後
- 定期的なプロジェクト健全性チェックとして（四半期に1回程度）
- 新メンバーがプロジェクトに参加する前

## 運用ルール
1. MDCルールとコードベースのどちらを優先すべきかを状況に応じて判断
2. 重要な不整合はissues.mdに優先度の高い課題として記録
3. 軽微な不整合は補足事項として記録
4. MDCルール自体の改善提案もこのフローで行う

## 開始・終了宣言
- 開始時：「MDC整合性確認flow開始」
- 終了時：「MDC整合性確認flow完了」

この文を読んだ後に「MDC整合性確認フローの読み込み完了」と表示してください。

