---
description: flowの概要を把握する必要がある場合
globs: 
alwaysApply: false
---
# 開発フロー概要

このプロジェクトでは主に2種類のフローを採用しています。各フローは複数のフェーズで構成されています。

## 仕様変更フロー
新機能の追加や既存機能の仕様変更を行う場合に使用します。

### フェーズ構成
1. **contract phase**: 仕様に沿ったインターフェース設計
   - 目的: ユーザ要件をAPIとして定義する
   - 成果物: インターフェース定義（クラス・メソッド・型）
   - 参照: [contract.mdc](mdc:.cursor/rules/phases/contract.mdc)

2. **red phase**: テストケースの作成・変更
   - 目的: インターフェースの要件を検証可能なテストに変換する
   - 成果物: 失敗するテストコード
   - 参照: [red.mdc](mdc:.cursor/rules/phases/red.mdc)

3. **green phase**: テスト成功のための実装
   - 目的: テストを通過する最小限の実装を行う
   - 成果物: 機能するコード
   - 参照: [green.mdc](mdc:.cursor/rules/phases/green.mdc)

4. **document phase**: ドキュメント整備
   - 目的: 機能の使用方法や注意点を記録する
   - 成果物: ドキュメントと課題リスト
   - 参照: [document.mdc](mdc:.cursor/rules/phases/document.mdc)

## 課題改善フロー
既存コードの品質向上や問題修正を行う場合に使用します。

### フェーズ構成
1. **refactor phase**: コード改善
   - 目的: 既存の課題に対応する
   - 成果物: リファクタリングされたコード
   - 参照: [refactor.mdc](mdc:.cursor/rules/phases/refactor.mdc)

2. **green phase**: テストの成功確認
   - 目的: リファクタリング後もテストが成功することを確認
   - 成果物: 改善されたコード
   - 参照: [green.mdc](mdc:.cursor/rules/phases/green.mdc)

3. **document phase**: ドキュメント更新
   - 目的: 変更内容の記録と新たな課題の特定
   - 成果物: 更新されたドキュメント
   - 参照: [document.mdc](mdc:.cursor/rules/phases/document.mdc)

## フロー選択基準
- 新機能追加/仕様変更の場合 → 仕様変更フロー
- バグ修正/コード品質向上の場合 → 課題改善フロー

## フローの循環と移行条件

### フロー内のフェーズ移行
各フロー内でのフェーズ移行は以下の条件に基づいて行います：

#### 仕様変更フロー
1. **contract → red**: インターフェース設計が完了し、ユーザーの承認を得た場合
2. **red → green**: 失敗するテストが十分に作成された場合
3. **green → document**: すべてのテストが成功した場合
4. **document → 完了**: ドキュメント更新が完了した場合

#### 課題改善フロー
1. **refactor → green**: リファクタリングが完了した場合
2. **green → document**: すべてのテストが成功した場合
3. **document → 完了**: ドキュメント更新が完了した場合

### フローの繰り返しと次のサイクル
1. 各フローは必要に応じて繰り返し実行できます
2. フローが完了したらユーザーに報告し、次の指示を仰ぎます
3. 追加の仕様変更がある場合は再度「仕様変更フロー」から開始します
4. 新たな課題が発見された場合は「課題改善フロー」を開始します

### フロー間の切り替え
- **仕様変更 → 課題改善**: document phase中に課題が見つかった場合
- **課題改善 → 仕様変更**: 課題対応中に仕様変更が必要になった場合

この文を読んだ後に「フロー概要の読み込み完了」と表示してください。
