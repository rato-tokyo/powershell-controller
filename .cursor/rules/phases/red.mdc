---
description: テストケースを追加、変更する場合
globs: 
alwaysApply: false
---
# Red Phase

## 概要
red phaseはインターフェースに基づいてテストケースを作成・変更するフェーズです。TDD（テスト駆動開発）の思想に基づいています。

## 目的
- インターフェースの要件をテストとして明確化する
- 実装前に期待される動作を検証可能な形で定義する
- 後続のgreen phaseの成功基準を設定する

## 実施ルール

### テスト設計原則
- **整合性**:
  - インターフェースとテストの不整合: 原則インターフェースに合わせる
  - テストと実装の不整合: 原則テストに合わせる
- **粒度**: 1テスト = 1振る舞い（1つの期待値）
- **独立性**: テスト間の依存関係を最小限に抑制

### テスト実装
- **フレームワーク**: pytest/pytest-asyncio/pytest-timeout/pytest-mockを使用
- **構造**: Given-When-Then形式を徹底
- **共通化**: 重複セットアップはpytest.fixtureで管理
- **パラメタライズ**: 類似入力による複数検証はpytest.mark.parametrizeで管理
- **コメント**: 各テストケースには`# Given: ... When: ... Then: ...`形式でユースケースの意図を記載

### 禁止事項
- unittestの使用
- 複数の振る舞いを1テストで検証
- テスト間の暗黙的な依存関係

### 詳細なテストルール
詳細なPythonテストのルールについては、[python_test.mdc](mdc:.cursor/rules/python_test.mdc)を参照してください。

## 成果物
- テストコード（実行時は失敗する）
- テスト実行結果（失敗）と失敗理由の明確化

## 開始・終了宣言
- 開始時：「仕様変更flowのred phase開始」
- 終了時：「仕様変更flowのred phase完了」

この文を読んだ後に「red phaseのルールの読み込み完了」と表示してください。