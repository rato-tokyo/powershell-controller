---
description: 仕様に沿ってインターフェースを作成、変更する場合
globs: 
alwaysApply: false
---
# Contract Phase

## 概要
contract phaseは仕様に沿ってインターフェースを設計・実装するフェーズです。CDD（契約駆動設計）の思想に基づいています。

## 目的
- ユーザー要件をプログラミングインターフェースとして定義する
- 実装前に明確な契約（インターフェース）を定める
- テスト作成の基盤となるインターフェースを確立する

## 実施ルール

### インターフェース設計
- **変更管理**: インターフェース変更時はユーザーに理由を説明し許可を得る
- **整合性**: インターフェース変更時は関連テスト・実装も必ず見直す
- **型安全性**: 全関数に戻り値型と引数型を必須とする（Anyは原則禁止）
- **エラー処理**: 例外を投げず、失敗を明示的に返す（Result型など）

### ドキュメント
- **Docstring**: 全メソッド・クラスに目的・引数・戻り値を記載
- **使用例**: 主要なユースケースについて使用例を記載

### 設計原則（SOLID）
- **S**: 単一責任原則 - 1インターフェース = 1責務
- **O**: 開放閉鎖原則 - 拡張には開いていて、修正には閉じている
- **L**: リスコフの置換原則 - サブタイプは基本型と置換可能
- **I**: インターフェース分離原則 - 小さな特化したインターフェースに分割
- **D**: 依存性逆転原則 - 抽象（インターフェース）に依存する

### 責務分離の例
- 機能の単位は「目的」ではなく「利用コンテキスト」で分ける
- 例：`PowerShellExecutor`（実行）と`PowerShellSessionManager`（セッション管理）

## 成果物
- インターフェース定義（クラス・メソッド・型）
- インターフェースのドキュメント

## 開始・終了宣言
- 開始時：「仕様変更flowのcontract phase開始」
- 終了時：「仕様変更flowのcontract phase完了」

この文を読んだ後に「contract phaseのルールの読み込み完了」と表示してください。