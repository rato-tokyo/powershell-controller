---
description: テストが成功するよう実装を改善する場合
globs: 
alwaysApply: false
---
# Green Phase

## 概要
green phaseはテストを成功させるための実装を行うフェーズです。TDD（テスト駆動開発）の思想に基づいています。

## 目的
- red phaseで作成したテストを通過する実装を開発する
- 最小限の実装でテストを成功させる
- 機能要件を実際のコードとして実現する

## 実施ルール

### 実装の優先順位
- **整合性**:
  - テストと実装の不整合: 原則テストに合わせる
  - テストに合わせると複雑になる場合: ユーザーに相談

### 開発規約
- **設定**: pyproject.tomlに集約（setup.py等は不使用）
- **コード長**: 1ファイル400行以内

### 設計原則
- **KISS**: 実装は常に最もシンプルな方法を選択
- **YAGNI**: 必要になるまで機能追加しない
- **DRY**: コードの重複を避ける
- **SOLID**: 5原則を遵守する
- **パターン**: 複雑なケースにはFacadeパターンを採用

### 指定ライブラリ
- **loguru**: ログ管理（標準loggingは禁止）
- **pydantic**: データ検証（dataclassesやattrsは禁止）
- **tenacity**: リトライ処理
- **result**: 戻り値を用いたエラー処理

### ドキュメント
- **Docstring**: 適切な説明を記載（自明な場合は省略可）
- **型アノテーション**: 全ての関数・変数に型を明示

### エラー処理
- 具体的なエラー情報（ファイル名・行番号・エラー種類・原因）を提供
- 例外のみによる処理は禁止（result型を使用）

### テスト関連
詳細なPythonテストのルールについては、[python_test.mdc](mdc:.cursor/rules/python_test.mdc)を参照してください。

## 成果物
- テストを通過する実装コード
- テスト実行結果（成功）

## 開始・終了宣言
- 開始時：「仕様変更flowのgreen phase開始」または「課題改善flowのgreen phase開始」
- 終了時：「仕様変更flowのgreen phase完了」または「課題改善flowのgreen phase完了」

この文を読んだ後に「green phaseのルールの読み込み完了」と表示してください。