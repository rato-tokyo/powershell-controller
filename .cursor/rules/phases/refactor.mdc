---
description: ユーザから指摘された課題がある、またはissues.mdに課題が記載されていて、その改善に取り組む場合
globs: 
alwaysApply: false
---
# Refactor Phase

## 概要
refactor phaseは、ユーザから指摘された課題や[issues.md](mdc:issues.md)に記載された課題に対して改善策を実施するフェーズです。

## 目的
- 既存コードの品質向上
- 技術的負債の解消
- バグの修正や機能改善

## 実施ルール

### 課題の特定と対応順序
- **最優先**: ユーザからの直接指摘がある課題
- **高優先**: 緊急性の高いバグや運用に影響するセキュリティ問題
- **通常優先**: issues.mdに記載された課題（記載順に対応）
- **低優先**: issues.mdの補足事項に記載された課題

### 複数課題への対応
- 複数の課題に対応する場合は、優先度の高いものから順に対応
- 依存関係のある課題は、先に根本課題を対応
- 課題の優先度が変わった場合はissues.mdを更新してから対応

### 変更の範囲
- 該当するMDCファイルが無かった場合はユーザに報告
- インターフェースを変更する場合はユーザに許可を求める
- テストが壊れる変更は避ける（必要な場合はテストも更新）

### コード品質改善プロセス
リファクタリングの一部として、コード品質向上フローを適用することを推奨します。詳細は[code_quality.mdc](mdc:.cursor/rules/code_quality.mdc)を参照してください。

基本的な手順は以下の通りです：
1. 静的解析ツールによるコードスキャン
2. 自動修正ツールの適用
3. 残りの問題の手動修正
4. テストによる検証

### 改善の指針
- 可読性の向上
- パフォーマンスの最適化
- セキュリティの強化
- コードの再利用性向上

## 成果物
- 改善されたコード
- 変更箇所の一覧と理由
- 対応した課題の優先度と対応順序の記録

## 開始・終了宣言
- 開始時：「課題改善flowのrefactor phase開始」
- 終了時：「課題改善flowのrefactor phase完了」

この文を読んだ後に「refactor phaseのルールの読み込み完了」と表示してください。