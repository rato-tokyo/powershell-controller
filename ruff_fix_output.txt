examples\async_example.py:13:11: ANN201 Missing return type annotation for public function `async_example`
   |
13 | async def async_example():
   |           ^^^^^^^^^^^^^ ANN201
14 |     """非同期APIの使用例"""
15 |     print("===== 非同期APIの使用例 =====")
   |
   = help: Add return type annotation: `None`

examples\async_example.py:53:11: ANN201 Missing return type annotation for public function `main`
   |
53 | async def main():
   |           ^^^^ ANN201
54 |     await async_example()
55 |     print("\n===== 完了 =====")
   |
   = help: Add return type annotation: `None`

examples\session_directory_navigation.py:15:5: ANN201 Missing return type annotation for public function `setup_logger`
   |
15 | def setup_logger():
   |     ^^^^^^^^^^^^ ANN201
16 |     """ロガーの設定"""
17 |     logger = logging.getLogger(__name__)
   |
   = help: Add return type annotation

examples\session_directory_navigation.py:30:5: ANN201 Missing return type annotation for public function `main`
   |
30 | def main():
   |     ^^^^ ANN201
31 |     """メイン処理"""
32 |     logger = setup_logger()
   |
   = help: Add return type annotation: `None`

examples\shortcuts_example.py:11:5: ANN201 Missing return type annotation for public function `shortcuts_example`
   |
11 | def shortcuts_example():
   |     ^^^^^^^^^^^^^^^^^ ANN201
12 |     """ショートカットメソッドの使用例"""
13 |     print("===== ショートカットメソッドの使用例 =====")
   |
   = help: Add return type annotation: `None`

examples\simple_example.py:12:5: ANN201 Missing return type annotation for public function `basic_example`
   |
12 | def basic_example():
   |     ^^^^^^^^^^^^^ ANN201
13 |     """基本的な使用例"""
14 |     print("===== 基本的な使用例 =====")
   |
   = help: Add return type annotation: `None`

src\py_pshell\command_executor.py:26:9: ANN204 Missing return type annotation for special method `__init__`
   |
24 |     """
25 |
26 |     def __init__(self, session: PowerShellSession | SessionProtocol):
   |         ^^^^^^^^ ANN204
27 |         """
28 |         コマンド実行クラスを初期化します。
   |
   = help: Add return type annotation: `None`

src\py_pshell\controller.py:35:9: ANN204 Missing return type annotation for special method `__init__`
   |
33 |     """
34 |
35 |     def __init__(self, settings: PowerShellControllerSettings | None = None):
   |         ^^^^^^^^ ANN204
36 |         """初期化
   |
   = help: Add return type annotation: `None`

src\py_pshell\controller.py:56:73: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `exc_tb`
   |
55 |     async def __aexit__(
56 |         self, exc_type: type | None, exc_val: Exception | None, exc_tb: Any | None
   |                                                                         ^^^^^^^^^^ ANN401
57 |     ) -> None:
58 |         """非同期コンテキストマネージャーのエグジットポイント
   |

src\py_pshell\controller.py:231:40: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `_create_session`
    |
229 |             raise PowerShellExecutionError(f"JSONの取得に失敗しました: {e}") from e
230 |
231 |     async def _create_session(self) -> Any:
    |                                        ^^^ ANN401
232 |         """PowerShellセッションを作成します。
    |

src\py_pshell\errors.py:37:9: ANN204 Missing return type annotation for special method `__init__`
   |
35 |     """PowerShellコマンドの実行がタイムアウトした場合の例外"""
36 |
37 |     def __init__(
   |         ^^^^^^^^ ANN204
38 |         self,
39 |         message: str = "PowerShell操作がタイムアウトしました",
   |
   = help: Add return type annotation: `None`

src\py_pshell\errors.py:59:9: ANN204 Missing return type annotation for special method `__init__`
   |
57 |     """PowerShellプロセスとの通信エラー"""
58 |
59 |     def __init__(self, message: str = "PowerShellプロセスとの通信に失敗しました"):
   |         ^^^^^^^^ ANN204
60 |         super().__init__(message)
   |
   = help: Add return type annotation: `None`

src\py_pshell\errors.py:66:9: ANN204 Missing return type annotation for special method `__init__`
   |
64 |     """PowerShellプロセス操作エラー"""
65 |
66 |     def __init__(self, message: str = "PowerShellプロセス操作でエラーが発生しました"):
   |         ^^^^^^^^ ANN204
67 |         super().__init__(message)
   |
   = help: Add return type annotation: `None`

src\py_pshell\errors.py:73:9: ANN204 Missing return type annotation for special method `__init__`
   |
71 |     """PowerShellストリームの操作に失敗した場合の例外"""
72 |
73 |     def __init__(self, message: str = "PowerShellストリームの操作に失敗しました"):
   |         ^^^^^^^^ ANN204
74 |         super().__init__(message)
   |
   = help: Add return type annotation: `None`

src\py_pshell\errors.py:89:24: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `*args`
   |
88 |     @wraps(func)
89 |     def wrapper(*args: Any, **kwargs: Any) -> Result[T, PowerShellError]:
   |                        ^^^ ANN401
90 |         try:
91 |             result = func(*args, **kwargs)
   |

src\py_pshell\errors.py:89:39: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `**kwargs`
   |
88 |     @wraps(func)
89 |     def wrapper(*args: Any, **kwargs: Any) -> Result[T, PowerShellError]:
   |                                       ^^^ ANN401
90 |         try:
91 |             result = func(*args, **kwargs)
   |

src\py_pshell\interfaces.py:62:31: ANN001 Missing type annotation for function argument `exc_type`
   |
60 |         ...
61 |
62 |     async def __aexit__(self, exc_type, exc_val, exc_tb) -> None:
   |                               ^^^^^^^^ ANN001
63 |         """非同期コンテキストマネージャーのエグジットポイント"""
64 |         ...
   |

src\py_pshell\interfaces.py:62:41: ANN001 Missing type annotation for function argument `exc_val`
   |
60 |         ...
61 |
62 |     async def __aexit__(self, exc_type, exc_val, exc_tb) -> None:
   |                                         ^^^^^^^ ANN001
63 |         """非同期コンテキストマネージャーのエグジットポイント"""
64 |         ...
   |

src\py_pshell\interfaces.py:62:50: ANN001 Missing type annotation for function argument `exc_tb`
   |
60 |         ...
61 |
62 |     async def __aexit__(self, exc_type, exc_val, exc_tb) -> None:
   |                                                  ^^^^^^ ANN001
63 |         """非同期コンテキストマネージャーのエグジットポイント"""
64 |         ...
   |

src\py_pshell\json_handler.py:36:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
   |
34 |             return json.loads(output)
35 |         except json.JSONDecodeError as e:
36 |             raise ValueError(f"JSONの解析に失敗しました: {e}\n元データ: {output}")
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
37 |
38 |     @staticmethod
   |

src\py_pshell\process_manager.py:25:9: ANN204 Missing return type annotation for special method `__init__`
   |
23 |     """
24 |
25 |     def __init__(self, settings: PowerShellControllerSettings):
   |         ^^^^^^^^ ANN204
26 |         """
27 |         プロセス管理クラスを初期化します。
   |
   = help: Add return type annotation: `None`

src\py_pshell\process_manager.py:77:13: F841 Local variable `transport` is assigned to but never used
   |
75 |             reader = asyncio.StreamReader()
76 |             protocol = asyncio.StreamReaderProtocol(reader)
77 |             transport = await asyncio.wait_for(
   |             ^^^^^^^^^ F841
78 |                 loop.connect_read_pipe(lambda: protocol, process.stdout), timeout=5.0
79 |             )
   |
   = help: Remove assignment to unused variable `transport`

src\py_pshell\stream_handler.py:24:9: ANN204 Missing return type annotation for special method `__init__`
   |
22 |     """
23 |
24 |     def __init__(self, settings: PowerShellControllerSettings):
   |         ^^^^^^^^ ANN204
25 |         """
26 |         ストリーム処理クラスを初期化します。
   |
   = help: Add return type annotation: `None`

src\py_pshell\utils\__init__.py:10:1: UP035 `typing.Dict` is deprecated, use `dict` instead
   |
 8 | import platform
 9 | import tempfile
10 | from typing import Any, Dict
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UP035
11 |
12 | from .command_executor import CommandExecutor
   |

src\py_pshell\utils\command_executor.py:22:9: ANN204 Missing return type annotation for special method `__init__`
   |
20 |     """
21 |
22 |     def __init__(self, session: Any):
   |         ^^^^^^^^ ANN204
23 |         """初期化
   |
   = help: Add return type annotation: `None`

src\py_pshell\utils\command_executor.py:22:33: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `session`
   |
20 |     """
21 |
22 |     def __init__(self, session: Any):
   |                                 ^^^ ANN401
23 |         """初期化
   |

templates\session_template.py:17:9: ANN204 Missing return type annotation for special method `__init__`
   |
15 |     """PowerShellセッション管理の基本テンプレート"""
16 |
17 |     def __init__(self, timeout: float = 10.0):
   |         ^^^^^^^^ ANN204
18 |         """
19 |         Args:
   |
   = help: Add return type annotation: `None`

templates\session_template.py:34:46: ANN401 Dynamically typed expressions (typing.Any) are disallowed in `execute`
   |
32 |         raise NotImplementedError("Subclass must implement cleanup()")
33 |
34 |     async def execute(self, command: str) -> Any:
   |                                              ^^^ ANN401
35 |         """
36 |         コマンドを実行
   |

templates\session_template.py:46:15: ANN204 Missing return type annotation for special method `__aenter__`
   |
44 |         raise NotImplementedError("Subclass must implement execute()")
45 |
46 |     async def __aenter__(self):
   |               ^^^^^^^^^^ ANN204
47 |         """非同期コンテキストマネージャのエントリーポイント"""
48 |         await self.initialize()
   |
   = help: Add return type annotation

templates\session_template.py:51:15: ANN204 Missing return type annotation for special method `__aexit__`
   |
49 |         return self
50 |
51 |     async def __aexit__(self, exc_type, exc_val, exc_tb):
   |               ^^^^^^^^^ ANN204
52 |         """非同期コンテキストマネージャの終了ポイント"""
53 |         await self.cleanup()
   |
   = help: Add return type annotation

templates\session_template.py:51:31: ANN001 Missing type annotation for function argument `exc_type`
   |
49 |         return self
50 |
51 |     async def __aexit__(self, exc_type, exc_val, exc_tb):
   |                               ^^^^^^^^ ANN001
52 |         """非同期コンテキストマネージャの終了ポイント"""
53 |         await self.cleanup()
   |

templates\session_template.py:51:41: ANN001 Missing type annotation for function argument `exc_val`
   |
49 |         return self
50 |
51 |     async def __aexit__(self, exc_type, exc_val, exc_tb):
   |                                         ^^^^^^^ ANN001
52 |         """非同期コンテキストマネージャの終了ポイント"""
53 |         await self.cleanup()
   |

templates\session_template.py:51:50: ANN001 Missing type annotation for function argument `exc_tb`
   |
49 |         return self
50 |
51 |     async def __aexit__(self, exc_type, exc_val, exc_tb):
   |                                                  ^^^^^^ ANN001
52 |         """非同期コンテキストマネージャの終了ポイント"""
53 |         await self.cleanup()
   |

tests\conftest.py:266:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
264 |             return "Command executed successfully"
265 |         except Exception as e:
266 |             raise PowerShellExecutionError(str(e), command)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
267 |
268 |     monkeypatch.setattr(PowerShellController, "run_command", mock_run_command)
    |

tests\integration\conftest.py:270:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
268 |             return "Command executed successfully"
269 |         except Exception as e:
270 |             raise PowerShellExecutionError(str(e), command)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
271 |
272 |     monkeypatch.setattr(PowerShellController, "run_command", mock_run_command)
    |

tests\test_utils.py:200:101: E501 Line too long (113 > 100)
    |
198 |             "Get-Date": "2023-01-01",
199 |             "Get-Error": PowerShellExecutionError("エラーが発生しました", "Get-Error"),
200 |             "Get-Process | ConvertTo-Json": '[{"Name": "Process1", "Id": 123}, {"Name": "Process2", "Id": 456}]',
    |                                                                                                     ^^^^^^^^^^^^^ E501
201 |         },
202 |         default_response="Default Response",
    |

tests\unit\conftest.py:270:13: B904 Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
    |
268 |             return "Command executed successfully"
269 |         except Exception as e:
270 |             raise PowerShellExecutionError(str(e), command)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ B904
271 |
272 |     monkeypatch.setattr(PowerShellController, "run_command", mock_run_command)
    |

tests\unit\test_utils.py:200:101: E501 Line too long (113 > 100)
    |
198 |             "Get-Date": "2023-01-01",
199 |             "Get-Error": PowerShellExecutionError("エラーが発生しました", "Get-Error"),
200 |             "Get-Process | ConvertTo-Json": '[{"Name": "Process1", "Id": 123}, {"Name": "Process2", "Id": 456}]',
    |                                                                                                     ^^^^^^^^^^^^^ E501
201 |         },
202 |         default_response="Default Response",
    |

Found 38 errors.
No fixes available (16 hidden fixes can be enabled with the `--unsafe-fixes` option).
